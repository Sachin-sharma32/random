Q. which type of language typescript converts javascript into based to "types"
Q. what type of type checking does typescript do
Q. what is the only difference between static type checking and dynamic type checking
Q. what does typescript compiler does, which command is used to compile typescript code, what is meant by transpiling
Q. what is type inference
Q. what is downleveling in typescript
Q. represent string, number, boolean, array, object types, array of string, array of object
Q. 2 ways of defining array in typescript
Q. represent these 4 types on function as argument and return type
Q. what is contextual typing in anonyomous functions
Q. what are optional properties in ts
Q. what are union and intersection types in ts
Q. if a union name Union contain type "Name" and "Age" which are also object types, if a object derived from Union has both Name and Age type value will we get error, what if we tray to access values of object, how to fix this by making change to -> type Union = Name | Age
Q. can i use .toUpperCase() if the union is string | number, if so then what is the one work around and what is the process called
Q. represent  type alias
Q. represent interfaces 
Q. what is the only difference between type alias and interface
Q. how to extend interface and type alias
Q. what is type assertion/casting, does this mean that we know the type of variable better than typescript, which keyword is used
Q. does assertion actually change the type of variable
Q. what is Non-null type assertion, which keyword is used
Q. what is literal type, use literal type with union
Q. what is literal inference in objects, what are the 2 fixes to that, what does const means
Q. which tsconfig.json flag issue error for "any" type

narrowing (give example of)
Q. typeof narrowing
Q. truthiness narrowing
Q. Equality narrowing
Q. in operator narrowing
Q. instance of narrowing, on what type of variables does it work
Q. type predicate narrowing with help of fish bird example
Q. difference between "as" and "is"
Q. explain discriminated unions with help of circle rectange shape example
Q. explain "never" and exhaustive check with help of switch statement, combine discriminated unions in this example also

Q. how to make a call signature from type alias
Q. which feature is used to overload function and add properties to function, explain with the help of add function
Q. give example of construct signature
Q. what is the 1 difference between "any" and generic functions, give example
Q. can we give any name instead of "Type" in generics
Q. how to take array as generics argument
Q. can a generic fn can take array and return single element
Q. use generics in arrow function
Q. what does <T,> indicate in generics
Q. give example of generic function taking multiple "type" values, can it return any "type" of value
Q. what is generic constraints, which keyword is used for it, give example
Q. what are optional parameter in functions
Q. can we do anything with unknown type variable
Q. what is the type of rest parameter
Q. how to specify readonly properties in objects, what is it's behavior with respect to reference datatype
Q. can we access object values with dynamic keys in typescript if using normal interface/type alias, how index signature solve this problem
Q. what is the alternative to index signature
Q. can we define other types in interface/type alias alongside index signature, if can then can we define different key:value pair from index signature
Q. give example of generic object types, can object types take another interface/alias as <Type>
Q. 2 ways to define a readonly array type
Q. define a tuple type, which datatype it is used with, how to specify "rest" elements in tuple
Q. does the sequence of defining type in tuple matter
Q. can tuple be readonly, how to define readonly tuple
Q. how does keyof helps in autocompletion, explain with example with object
Q. give example of indexed access type in typescript, use it with keyof operator, can we use some object's keys also
Q. give example of conditional type
Q. how to create a readonly type from an existing type, how is the Readonly<Type> implemented internally, which functionality does it use

Q. what is the use of enum
Q. which two data type enum constants can contain 
Q. what if we don't define value to constants in enum
Q. is enum part of javascript
Q. does enum provide type safety
Q. should we use enum
Q. what is the alternative to enum
Q. if we have a const object in a file and a type alias of the same name will ts give error
Q. which is the type of LoginMode :
    const LoginMode = {
    name: "Sachin",
    } as const;

    type LoginMode = keyof typeof LoginMode;

Q. explain literal types and template literal types
Q. use template literal types in interface/alias

----- React Typescript -----
Q. what are the 3 non-nullish values in typescript, what is the one use case
Q. what is the difference between JSX.Element and React.ReactNode
Q. do we have to define return type of react element, when should we use it
Q. one reason why we should not use React.FC<Props>
Q. what error does we get when we use forwardRef, how to fix