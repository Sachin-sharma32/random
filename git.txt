Q. what is version control
Q. what is LVCS, CVCS, DVCS
Q. what is git
Q. how does git versioning work
Q. in which folder git database is stored
Q. what are the three states in git
Q. which directory is copied when you git clone
Q. 2 ways of using git
Q. what is --system --global --local, which files
-> git config --list --show-origin (current config)
-> git config --global user.name "John Doe" 
-> git config --global user.email johndoe@example.com (needs to be done only once)
-> git config --global init.defaultBranch main (change default branch name)
-> git config --list
-> git config help (concise), git config -h (short)
Q. work of - git init, git add, git commit
Q. what are tracked and untracked files
-> git status -s
Q. how to track newly added file
-> .gitignore -> .txt, !index.txt, /TODO (only root TODO file), TODO/ (all files in TODO folder), docs/**/*.txt
-> git diff (un-staged changes)
-> git difftool 
-> git commit -a (stage and commit with files from previous commit)
-> git rm index.js (untracked)
-> git rm --cached index.js (untrack but don't delete)
--> git log (-p, -1, --stat, --pretty=oneline, --name-only, --name-status)
->  git log --pretty=format:"%h - %an, %ae, %cn, %ce, %ar : %s"
-> git log --pretty=online --graph
-> git log --since=2.hour
-> git log --until=2.hour
-> git log --author=sachin
-> git log -S functionName (commits that changed it)
-> git log -- /react.txt (commits that changed this file)
-> git log --no-merges (non merged commits)

(making changes to previous commit)
git commit -m "six"
git add index.txt
git commit --amend --no-edit (add index.txt to commit)
git commit --amend -m "changed six" (change name of commit)

-> git reset HEAD index.txt (un-stage file)
-> git checkout -- index.txt (discard changed made after commit)
-> git remote -v (hosted repo)
-> git fetch origin (pull changes into local repo, works for cloned repo also)
-> git pull (if only one remove repo)
-> git remote show origin (info about remote)
-> git remote rename origin sachin
-> git remote rm origin

-> git tag
-> git tag -l v1.0 (list all tags starting with 1.0)
Q. what are 2 types of tags in git
Q. git tag -a v1.0 -m "first tag"
-> git show v1.0 (show tag along with it's commit)
-> git tag v3.0 4be30ee (add tags for old commit)
-> git push origin v1.0 (push tag to remote)
-> git push origin --tags (push all tags)
-> git push origin --tags --follow-tag (push only annotation tags)
-> git tag -d v1.0 (delete)
-> git push origin --delete v1.0 (delete from remote)

-> git config --global alias.last 'log -1'
Q. explain commit, tree, blob, master and HEAD with diagram
-> git branch testing (new branch)
-> git log --oneline --decorate (which branch currently on)
-> git checkout testing (move HEAD to other branch)
-> git log testing
Q. explain what happen when you create commit in new branch with diagram
-> git log --oneline --decorate --graph --all
-> git checkout -b testing (create and switch)
-> git merge testing (merge changes)
Q. to which commit main branch point after checkout
Q. what is merge commit
-> git branch -v (last commit)
-> git branch --merged (branches merged in other branches)
-> git branch --no-merged (cannot delete before merging in other branch)
-> git branch -D testing (delete un-merged branch)
-> 



















